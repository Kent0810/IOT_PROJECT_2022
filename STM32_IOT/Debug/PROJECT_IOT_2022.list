
PROJECT_IOT_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800377c  0800377c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800377c  0800377c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800377c  0800377c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000007c  08003800  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003800  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba50  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc9  00000000  00000000  0002baf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0002dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0002e820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f85  00000000  00000000  0002f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecb7  00000000  00000000  00048405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f72a  00000000  00000000  000570bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e67e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000e6838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036e8 	.word	0x080036e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080036e8 	.word	0x080036e8

0800014c <command_parser_fsm>:
uint8_t isRST;
uint8_t isOK;

char * string_buffer;

void command_parser_fsm (){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (parserStatus){
 8000150:	4b2d      	ldr	r3, [pc, #180]	; (8000208 <command_parser_fsm+0xbc>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b03      	cmp	r3, #3
 8000156:	d014      	beq.n	8000182 <command_parser_fsm+0x36>
 8000158:	2b03      	cmp	r3, #3
 800015a:	dc4d      	bgt.n	80001f8 <command_parser_fsm+0xac>
 800015c:	2b01      	cmp	r3, #1
 800015e:	d002      	beq.n	8000166 <command_parser_fsm+0x1a>
 8000160:	2b02      	cmp	r3, #2
 8000162:	d019      	beq.n	8000198 <command_parser_fsm+0x4c>
 			timer1_flag = 0;
 			break;
 		}
		break;
 	default:
 		break;
 8000164:	e048      	b.n	80001f8 <command_parser_fsm+0xac>
		if(isRST == 1){
 8000166:	4b29      	ldr	r3, [pc, #164]	; (800020c <command_parser_fsm+0xc0>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b01      	cmp	r3, #1
 800016c:	d146      	bne.n	80001fc <command_parser_fsm+0xb0>
			sensor_flag = 1;//print
 800016e:	4b28      	ldr	r3, [pc, #160]	; (8000210 <command_parser_fsm+0xc4>)
 8000170:	2201      	movs	r2, #1
 8000172:	601a      	str	r2, [r3, #0]
			isRST = 0;
 8000174:	4b25      	ldr	r3, [pc, #148]	; (800020c <command_parser_fsm+0xc0>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
			parserStatus = WRITE;
 800017a:	4b23      	ldr	r3, [pc, #140]	; (8000208 <command_parser_fsm+0xbc>)
 800017c:	2203      	movs	r2, #3
 800017e:	601a      	str	r2, [r3, #0]
		break;
 8000180:	e03c      	b.n	80001fc <command_parser_fsm+0xb0>
		sensor_flag = 1;
 8000182:	4b23      	ldr	r3, [pc, #140]	; (8000210 <command_parser_fsm+0xc4>)
 8000184:	2201      	movs	r2, #1
 8000186:	601a      	str	r2, [r3, #0]
		setTimer1(PARSER_TIME_OUT);
 8000188:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800018c:	f000 fac0 	bl	8000710 <setTimer1>
		parserStatus = WAIT;
 8000190:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <command_parser_fsm+0xbc>)
 8000192:	2202      	movs	r2, #2
 8000194:	601a      	str	r2, [r3, #0]
		break;
 8000196:	e034      	b.n	8000202 <command_parser_fsm+0xb6>
 		if(isRST == 1){
 8000198:	4b1c      	ldr	r3, [pc, #112]	; (800020c <command_parser_fsm+0xc0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10c      	bne.n	80001ba <command_parser_fsm+0x6e>
 			isRST =  0;
 80001a0:	4b1a      	ldr	r3, [pc, #104]	; (800020c <command_parser_fsm+0xc0>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
 			sensor_flag = 1;
 80001a6:	4b1a      	ldr	r3, [pc, #104]	; (8000210 <command_parser_fsm+0xc4>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	601a      	str	r2, [r3, #0]
 			setTimer1(0);//delete timer
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 faaf 	bl	8000710 <setTimer1>
 			parserStatus = WRITE;
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <command_parser_fsm+0xbc>)
 80001b4:	2203      	movs	r2, #3
 80001b6:	601a      	str	r2, [r3, #0]
 			break;
 80001b8:	e023      	b.n	8000202 <command_parser_fsm+0xb6>
 		if(isOK == 1){
 80001ba:	4b16      	ldr	r3, [pc, #88]	; (8000214 <command_parser_fsm+0xc8>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d10c      	bne.n	80001dc <command_parser_fsm+0x90>
 			sensor_flag = 0;
 80001c2:	4b13      	ldr	r3, [pc, #76]	; (8000210 <command_parser_fsm+0xc4>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 			setTimer1(0);
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 faa1 	bl	8000710 <setTimer1>
 			isOK = 0;
 80001ce:	4b11      	ldr	r3, [pc, #68]	; (8000214 <command_parser_fsm+0xc8>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
 			parserStatus = INIT;
 80001d4:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <command_parser_fsm+0xbc>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
 			break;
 80001da:	e012      	b.n	8000202 <command_parser_fsm+0xb6>
 		if(timer1_flag == 1){
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <command_parser_fsm+0xcc>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d10d      	bne.n	8000200 <command_parser_fsm+0xb4>
 			sensor_flag = 1;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <command_parser_fsm+0xc4>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	601a      	str	r2, [r3, #0]
 			parserStatus = WRITE;
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <command_parser_fsm+0xbc>)
 80001ec:	2203      	movs	r2, #3
 80001ee:	601a      	str	r2, [r3, #0]
 			timer1_flag = 0;
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <command_parser_fsm+0xcc>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 			break;
 80001f6:	e004      	b.n	8000202 <command_parser_fsm+0xb6>
 		break;
 80001f8:	bf00      	nop
 80001fa:	e002      	b.n	8000202 <command_parser_fsm+0xb6>
		break;
 80001fc:	bf00      	nop
 80001fe:	e000      	b.n	8000202 <command_parser_fsm+0xb6>
		break;
 8000200:	bf00      	nop
	}


}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000098 	.word	0x20000098
 8000210:	2000009c 	.word	0x2000009c
 8000214:	20000099 	.word	0x20000099
 8000218:	20000198 	.word	0x20000198

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08e      	sub	sp, #56	; 0x38
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fc75 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f881 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f9c9 	bl	80005c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022e:	f000 f8d5 	bl	80003dc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000232:	f000 f94f 	bl	80004d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f999 	bl	800056c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800023a:	f000 f90d 	bl	8000458 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800023e:	482f      	ldr	r0, [pc, #188]	; (80002fc <main+0xe0>)
 8000240:	f001 ffdc 	bl	80021fc <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 8000244:	482e      	ldr	r0, [pc, #184]	; (8000300 <main+0xe4>)
 8000246:	f000 fdc1 	bl	8000dcc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800024a:	482e      	ldr	r0, [pc, #184]	; (8000304 <main+0xe8>)
 800024c:	f000 fdbe 	bl	8000dcc <HAL_ADC_Start>

  HAL_UART_Receive_IT(&huart2, &temp,1);
 8000250:	2201      	movs	r2, #1
 8000252:	492d      	ldr	r1, [pc, #180]	; (8000308 <main+0xec>)
 8000254:	482d      	ldr	r0, [pc, #180]	; (800030c <main+0xf0>)
 8000256:	f002 fc5a 	bl	8002b0e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char str[50];
	  	ADC_value_RT = HAL_ADC_GetValue(&hadc1);
 800025a:	4829      	ldr	r0, [pc, #164]	; (8000300 <main+0xe4>)
 800025c:	f000 fe64 	bl	8000f28 <HAL_ADC_GetValue>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <main+0xf4>)
 8000266:	601a      	str	r2, [r3, #0]
	  	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!1:RT:%ld#\r\n", ADC_value_RT/40), 1000);
 8000268:	4b29      	ldr	r3, [pc, #164]	; (8000310 <main+0xf4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a29      	ldr	r2, [pc, #164]	; (8000314 <main+0xf8>)
 800026e:	fb82 1203 	smull	r1, r2, r2, r3
 8000272:	1112      	asrs	r2, r2, #4
 8000274:	17db      	asrs	r3, r3, #31
 8000276:	1ad2      	subs	r2, r2, r3
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	4927      	ldr	r1, [pc, #156]	; (8000318 <main+0xfc>)
 800027c:	4618      	mov	r0, r3
 800027e:	f002 fdb9 	bl	8002df4 <siprintf>
 8000282:	4603      	mov	r3, r0
 8000284:	b29a      	uxth	r2, r3
 8000286:	1d39      	adds	r1, r7, #4
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	481f      	ldr	r0, [pc, #124]	; (800030c <main+0xf0>)
 800028e:	f002 fbac 	bl	80029ea <HAL_UART_Transmit>
	  	ADC_value_RH = HAL_ADC_GetValue(&hadc2);
 8000292:	481c      	ldr	r0, [pc, #112]	; (8000304 <main+0xe8>)
 8000294:	f000 fe48 	bl	8000f28 <HAL_ADC_GetValue>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <main+0x100>)
 800029e:	601a      	str	r2, [r3, #0]
	  	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!1:RH:%ld#\r\n", ADC_value_RH/40), 1000);
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <main+0x100>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <main+0xf8>)
 80002a6:	fb82 1203 	smull	r1, r2, r2, r3
 80002aa:	1112      	asrs	r2, r2, #4
 80002ac:	17db      	asrs	r3, r3, #31
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	491b      	ldr	r1, [pc, #108]	; (8000320 <main+0x104>)
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fd9d 	bl	8002df4 <siprintf>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29a      	uxth	r2, r3
 80002be:	1d39      	adds	r1, r7, #4
 80002c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c4:	4811      	ldr	r0, [pc, #68]	; (800030c <main+0xf0>)
 80002c6:	f002 fb90 	bl	80029ea <HAL_UART_Transmit>
  	  if(buffer_flag == 1||timer1_flag == 1) {
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x108>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d003      	beq.n	80002da <main+0xbe>
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <main+0x10c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d108      	bne.n	80002ec <main+0xd0>
		  if(buffer_flag == 1){
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <main+0x108>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d102      	bne.n	80002e8 <main+0xcc>
			  buffer_flag = 0;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <main+0x108>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
		  }
		  command_parser_fsm();
 80002e8:	f7ff ff30 	bl	800014c <command_parser_fsm>

	  }
  	  read_sensor_fsm();
 80002ec:	f000 f9d4 	bl	8000698 <read_sensor_fsm>
  	  HAL_Delay(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f000 fc6e 	bl	8000bd4 <HAL_Delay>
  {
 80002f8:	e7af      	b.n	800025a <main+0x3e>
 80002fa:	bf00      	nop
 80002fc:	2000010c 	.word	0x2000010c
 8000300:	200000ac 	.word	0x200000ac
 8000304:	200000dc 	.word	0x200000dc
 8000308:	200000a0 	.word	0x200000a0
 800030c:	20000154 	.word	0x20000154
 8000310:	200000a4 	.word	0x200000a4
 8000314:	66666667 	.word	0x66666667
 8000318:	08003700 	.word	0x08003700
 800031c:	200000a8 	.word	0x200000a8
 8000320:	08003710 	.word	0x08003710
 8000324:	20000008 	.word	0x20000008
 8000328:	20000198 	.word	0x20000198

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	; 0x50
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fd52 	bl	8002de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000364:	2310      	movs	r3, #16
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	2302      	movs	r3, #2
 800036a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800036c:	2300      	movs	r3, #0
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000370:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fa1e 	bl	80017bc <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000386:	f000 f981 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fc8a 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003b2:	f000 f96b 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b6:	2302      	movs	r3, #2
 80003b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fe14 	bl	8001ff0 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003ce:	f000 f95d 	bl	800068c <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3750      	adds	r7, #80	; 0x50
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_ADC1_Init+0x74>)
 80003ee:	4a19      	ldr	r2, [pc, #100]	; (8000454 <MX_ADC1_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_ADC1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_ADC1_Init+0x74>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_ADC1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_ADC1_Init+0x74>)
 8000406:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800040a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_ADC1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_ADC1_Init+0x74>)
 8000414:	2201      	movs	r2, #1
 8000416:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <MX_ADC1_Init+0x74>)
 800041a:	f000 fbff 	bl	8000c1c <HAL_ADC_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f000 f932 	bl	800068c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000428:	2300      	movs	r3, #0
 800042a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042c:	2301      	movs	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_ADC1_Init+0x74>)
 800043a:	f000 fd81 	bl	8000f40 <HAL_ADC_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000444:	f000 f922 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200000ac 	.word	0x200000ac
 8000454:	40012400 	.word	0x40012400

08000458 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_ADC2_Init+0x74>)
 800046a:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <MX_ADC2_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_ADC2_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_ADC2_Init+0x74>)
 8000476:	2201      	movs	r2, #1
 8000478:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_ADC2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_ADC2_Init+0x74>)
 8000482:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000486:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_ADC2_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_ADC2_Init+0x74>)
 8000490:	2201      	movs	r2, #1
 8000492:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000494:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_ADC2_Init+0x74>)
 8000496:	f000 fbc1 	bl	8000c1c <HAL_ADC_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80004a0:	f000 f8f4 	bl	800068c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_ADC2_Init+0x74>)
 80004b6:	f000 fd43 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80004c0:	f000 f8e4 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200000dc 	.word	0x200000dc
 80004d0:	40012800 	.word	0x40012800

080004d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	463b      	mov	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_TIM2_Init+0x94>)
 80004f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_TIM2_Init+0x94>)
 80004fa:	223f      	movs	r2, #63	; 0x3f
 80004fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_TIM2_Init+0x94>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_TIM2_Init+0x94>)
 8000506:	f242 720f 	movw	r2, #9999	; 0x270f
 800050a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_TIM2_Init+0x94>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_TIM2_Init+0x94>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000518:	4813      	ldr	r0, [pc, #76]	; (8000568 <MX_TIM2_Init+0x94>)
 800051a:	f001 fe1f 	bl	800215c <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000524:	f000 f8b2 	bl	800068c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4619      	mov	r1, r3
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <MX_TIM2_Init+0x94>)
 8000536:	f001 ffbb 	bl	80024b0 <HAL_TIM_ConfigClockSource>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 f8a4 	bl	800068c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000544:	2300      	movs	r3, #0
 8000546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_TIM2_Init+0x94>)
 8000552:	f002 f98d 	bl	8002870 <HAL_TIMEx_MasterConfigSynchronization>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800055c:	f000 f896 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000010c 	.word	0x2000010c

0800056c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_USART2_UART_Init+0x50>)
 8000574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800057c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 80005a4:	f002 f9d4 	bl	8002950 <HAL_UART_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ae:	f000 f86d 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000154 	.word	0x20000154
 80005bc:	40004400 	.word	0x40004400

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0x9c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <MX_GPIO_Init+0x9c>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <MX_GPIO_Init+0x9c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_GPIO_Init+0x9c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <MX_GPIO_Init+0x9c>)
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_GPIO_Init+0x9c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2130      	movs	r1, #48	; 0x30
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <MX_GPIO_Init+0xa0>)
 800060a:	f001 f8bf 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <MX_GPIO_Init+0xa4>)
 8000616:	f001 f8b9 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_RED_Pin;
 800061a:	2330      	movs	r3, #48	; 0x30
 800061c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <MX_GPIO_Init+0xa0>)
 8000632:	f000 ff27 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800063a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2302      	movs	r3, #2
 8000646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4619      	mov	r1, r3
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_GPIO_Init+0xa4>)
 8000650:	f000 ff18 	bl	8001484 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800
 8000664:	40010c00 	.word	0x40010c00

08000668 <Read_Value>:

/* USER CODE BEGIN 4 */
void Read_Value(){
 8000668:	b480      	push	{r7}
 800066a:	b08f      	sub	sp, #60	; 0x3c
 800066c:	af00      	add	r7, sp, #0
	char str[50];
// 	ADC_value = HAL_ADC_GetValue(&hadc1);
//	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!ADC=%d#\r\n", ADC_value), 1000);
}
 800066e:	bf00      	nop
 8000670:	373c      	adds	r7, #60	; 0x3c
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	timerRun(); //every 10ms
 8000680:	f000 f87e 	bl	8000780 <timerRun>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <read_sensor_fsm>:

#include "read_sensor.h"



void read_sensor_fsm(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	switch (sensorStatus){
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <read_sensor_fsm+0x6c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b0d      	cmp	r3, #13
 80006a2:	d016      	beq.n	80006d2 <read_sensor_fsm+0x3a>
 80006a4:	2b0d      	cmp	r3, #13
 80006a6:	dc26      	bgt.n	80006f6 <read_sensor_fsm+0x5e>
 80006a8:	2b0b      	cmp	r3, #11
 80006aa:	d002      	beq.n	80006b2 <read_sensor_fsm+0x1a>
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	d004      	beq.n	80006ba <read_sensor_fsm+0x22>
			Read_Value();
			setTimer2(PARSER_TIME_OUT);
		}
		break;
	default:
		break;
 80006b0:	e021      	b.n	80006f6 <read_sensor_fsm+0x5e>
		sensorStatus = SENSOR_WAIT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <read_sensor_fsm+0x6c>)
 80006b4:	220c      	movs	r2, #12
 80006b6:	601a      	str	r2, [r3, #0]
		break;
 80006b8:	e022      	b.n	8000700 <read_sensor_fsm+0x68>
		if(sensor_flag == 1){
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <read_sensor_fsm+0x70>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d11b      	bne.n	80006fa <read_sensor_fsm+0x62>
			setTimer2(SENSOR_DELAY);
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	f000 f83f 	bl	8000748 <setTimer2>
			sensorStatus = SENSOR_READ;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <read_sensor_fsm+0x6c>)
 80006cc:	220d      	movs	r2, #13
 80006ce:	601a      	str	r2, [r3, #0]
		break;
 80006d0:	e013      	b.n	80006fa <read_sensor_fsm+0x62>
		if(sensor_flag == 0){
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <read_sensor_fsm+0x70>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <read_sensor_fsm+0x48>
			sensorStatus = SENSOR_WAIT;
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <read_sensor_fsm+0x6c>)
 80006dc:	220c      	movs	r2, #12
 80006de:	601a      	str	r2, [r3, #0]
		if(timer2_flag == 1){
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <read_sensor_fsm+0x74>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d10a      	bne.n	80006fe <read_sensor_fsm+0x66>
			Read_Value();
 80006e8:	f7ff ffbe 	bl	8000668 <Read_Value>
			setTimer2(PARSER_TIME_OUT);
 80006ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006f0:	f000 f82a 	bl	8000748 <setTimer2>
		break;
 80006f4:	e003      	b.n	80006fe <read_sensor_fsm+0x66>
		break;
 80006f6:	bf00      	nop
 80006f8:	e002      	b.n	8000700 <read_sensor_fsm+0x68>
		break;
 80006fa:	bf00      	nop
 80006fc:	e000      	b.n	8000700 <read_sensor_fsm+0x68>
		break;
 80006fe:	bf00      	nop
	}
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000004 	.word	0x20000004
 8000708:	2000009c 	.word	0x2000009c
 800070c:	2000019c 	.word	0x2000019c

08000710 <setTimer1>:
int timer2_flag = 0;
int timer1_counter = 0;
int timer2_counter = 0;


void setTimer1(int duration){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <setTimer1+0x2c>)
 800071c:	fb82 1203 	smull	r1, r2, r2, r3
 8000720:	1092      	asrs	r2, r2, #2
 8000722:	17db      	asrs	r3, r3, #31
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <setTimer1+0x30>)
 8000728:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <setTimer1+0x34>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	66666667 	.word	0x66666667
 8000740:	200001a0 	.word	0x200001a0
 8000744:	20000198 	.word	0x20000198

08000748 <setTimer2>:

void setTimer2(int duration){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <setTimer2+0x2c>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1092      	asrs	r2, r2, #2
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <setTimer2+0x30>)
 8000760:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <setTimer2+0x34>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	66666667 	.word	0x66666667
 8000778:	200001a4 	.word	0x200001a4
 800077c:	2000019c 	.word	0x2000019c

08000780 <timerRun>:


void timerRun(){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <timerRun+0x4c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dd0b      	ble.n	80007a4 <timerRun+0x24>
		timer1_counter--;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <timerRun+0x4c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b01      	subs	r3, #1
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <timerRun+0x4c>)
 8000794:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <timerRun+0x4c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	dc02      	bgt.n	80007a4 <timerRun+0x24>
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <timerRun+0x50>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <timerRun+0x54>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	dd0b      	ble.n	80007c4 <timerRun+0x44>
		timer2_counter--;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <timerRun+0x54>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <timerRun+0x54>)
 80007b4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <timerRun+0x54>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	dc02      	bgt.n	80007c4 <timerRun+0x44>
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <timerRun+0x58>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
	}
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	200001a0 	.word	0x200001a0
 80007d0:	20000198 	.word	0x20000198
 80007d4:	200001a4 	.word	0x200001a4
 80007d8:	2000019c 	.word	0x2000019c

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_MspInit+0x5c>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_MspInit+0x5c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6193      	str	r3, [r2, #24]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_MspInit+0x5c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x5c>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <HAL_MspInit+0x5c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_MspInit+0x5c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_MspInit+0x60>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_MspInit+0x60>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000
 800083c:	40010000 	.word	0x40010000

08000840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <HAL_ADC_MspInit+0xbc>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d122      	bne.n	80008a6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 8000866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000894:	2303      	movs	r3, #3
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	4619      	mov	r1, r3
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <HAL_ADC_MspInit+0xc4>)
 80008a0:	f000 fdf0 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80008a4:	e026      	b.n	80008f4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d121      	bne.n	80008f4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 80008b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_ADC_MspInit+0xc4>)
 80008f0:	f000 fdc8 	bl	8001484 <HAL_GPIO_Init>
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40012400 	.word	0x40012400
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800
 8000908:	40012800 	.word	0x40012800

0800090c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800091c:	d113      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_TIM_Base_MspInit+0x44>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <HAL_TIM_Base_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_TIM_Base_MspInit+0x44>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	201c      	movs	r0, #28
 800093c:	f000 fd6b 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000940:	201c      	movs	r0, #28
 8000942:	f000 fd84 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <HAL_UART_MspInit+0x88>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d12f      	bne.n	80009d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	61d3      	str	r3, [r2, #28]
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009a4:	2304      	movs	r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <HAL_UART_MspInit+0x90>)
 80009b8:	f000 fd64 	bl	8001484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009bc:	2308      	movs	r3, #8
 80009be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_UART_MspInit+0x90>)
 80009d0:	f000 fd58 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2e:	f000 f8b5 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM2_IRQHandler+0x10>)
 8000a3e:	f001 fc2f 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000010c 	.word	0x2000010c

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f002 f988 	bl	8002d90 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20005000 	.word	0x20005000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	200001a8 	.word	0x200001a8
 8000ab4:	200001c0 	.word	0x200001c0

08000ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aea:	f7ff ffe5 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 f955 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fb93 	bl	800021c <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b00:	08003784 	.word	0x08003784
  ldr r2, =_sbss
 8000b04:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b08:	200001c0 	.word	0x200001c0

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 fc6d 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe56 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fc85 	bl	800146a <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 fc4d 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20000014 	.word	0x20000014
 8000b98:	20000010 	.word	0x20000010

08000b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x1c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <HAL_IncTick+0x20>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20000014 	.word	0x20000014
 8000bbc:	200001ac 	.word	0x200001ac

08000bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <HAL_GetTick+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	200001ac 	.word	0x200001ac

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff fff0 	bl	8000bc0 <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffe0 	bl	8000bc0 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000014 	.word	0x20000014

08000c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0be      	b.n	8000dbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d109      	bne.n	8000c60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fdf0 	bl	8000840 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fabf 	bl	80011e4 <ADC_ConversionStop_Disable>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8099 	bne.w	8000daa <HAL_ADC_Init+0x18e>
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8095 	bne.w	8000daa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c88:	f023 0302 	bic.w	r3, r3, #2
 8000c8c:	f043 0202 	orr.w	r2, r3, #2
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
 8000ca2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ca4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0xa2>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d102      	bne.n	8000cc4 <HAL_ADC_Init+0xa8>
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	e000      	b.n	8000cc6 <HAL_ADC_Init+0xaa>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7d1b      	ldrb	r3, [r3, #20]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d119      	bne.n	8000d08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7b1b      	ldrb	r3, [r3, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	035a      	lsls	r2, r3, #13
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e00b      	b.n	8000d08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f043 0220 	orr.w	r2, r3, #32
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_ADC_Init+0x1a8>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d38:	d003      	beq.n	8000d42 <HAL_ADC_Init+0x126>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d104      	bne.n	8000d4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	051b      	lsls	r3, r3, #20
 8000d4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_ADC_Init+0x1ac>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d10b      	bne.n	8000d88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d86:	e018      	b.n	8000dba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f023 0312 	bic.w	r3, r3, #18
 8000d90:	f043 0210 	orr.w	r2, r3, #16
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da8:	e007      	b.n	8000dba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f043 0210 	orr.w	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	ffe1f7fd 	.word	0xffe1f7fd
 8000dc8:	ff1f0efe 	.word	0xff1f0efe

08000dcc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Start+0x1a>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e098      	b.n	8000f18 <HAL_ADC_Start+0x14c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f99e 	bl	8001130 <ADC_Enable>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 8087 	bne.w	8000f0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a41      	ldr	r2, [pc, #260]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d105      	bne.n	8000e2a <HAL_ADC_Start+0x5e>
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d115      	bne.n	8000e56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d026      	beq.n	8000e92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e54:	e01d      	b.n	8000e92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d004      	beq.n	8000e76 <HAL_ADC_Start+0xaa>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_ADC_Start+0xc6>
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	f023 0206 	bic.w	r2, r3, #6
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eaa:	e002      	b.n	8000eb2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f06f 0202 	mvn.w	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ece:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ed2:	d113      	bne.n	8000efc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_ADC_Start+0x154>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d105      	bne.n	8000eea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_ADC_Start+0x158>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d108      	bne.n	8000efc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	e00c      	b.n	8000f16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	e003      	b.n	8000f16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40012800 	.word	0x40012800
 8000f24:	40012400 	.word	0x40012400

08000f28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x20>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e0dc      	b.n	800111a <HAL_ADC_ConfigChannel+0x1da>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b06      	cmp	r3, #6
 8000f6e:	d81c      	bhi.n	8000faa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	3b05      	subs	r3, #5
 8000f82:	221f      	movs	r2, #31
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4019      	ands	r1, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b05      	subs	r3, #5
 8000f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa8:	e03c      	b.n	8001024 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b0c      	cmp	r3, #12
 8000fb0:	d81c      	bhi.n	8000fec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3b23      	subs	r3, #35	; 0x23
 8000fc4:	221f      	movs	r2, #31
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4019      	ands	r1, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b23      	subs	r3, #35	; 0x23
 8000fde:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fea:	e01b      	b.n	8001024 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3b41      	subs	r3, #65	; 0x41
 8000ffe:	221f      	movs	r2, #31
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	4019      	ands	r1, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	3b41      	subs	r3, #65	; 0x41
 8001018:	fa00 f203 	lsl.w	r2, r0, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	430a      	orrs	r2, r1
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d91c      	bls.n	8001066 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68d9      	ldr	r1, [r3, #12]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	3b1e      	subs	r3, #30
 800103e:	2207      	movs	r2, #7
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	3b1e      	subs	r3, #30
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	e019      	b.n	800109a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6919      	ldr	r1, [r3, #16]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	2207      	movs	r2, #7
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	4019      	ands	r1, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	fa00 f203 	lsl.w	r2, r0, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b10      	cmp	r3, #16
 80010a0:	d003      	beq.n	80010aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010a6:	2b11      	cmp	r3, #17
 80010a8:	d132      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <HAL_ADC_ConfigChannel+0x1e4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d125      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d126      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d11a      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_ConfigChannel+0x1e8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_ADC_ConfigChannel+0x1ec>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9a      	lsrs	r2, r3, #18
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f0:	e002      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f9      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x1b2>
 80010fe:	e007      	b.n	8001110 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	f043 0220 	orr.w	r2, r3, #32
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40012400 	.word	0x40012400
 8001128:	2000000c 	.word	0x2000000c
 800112c:	431bde83 	.word	0x431bde83

08001130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b01      	cmp	r3, #1
 800114c:	d040      	beq.n	80011d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <ADC_Enable+0xac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <ADC_Enable+0xb0>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	0c9b      	lsrs	r3, r3, #18
 800116a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800116c:	e002      	b.n	8001174 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3b01      	subs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f9      	bne.n	800116e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800117a:	f7ff fd21 	bl	8000bc0 <HAL_GetTick>
 800117e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001180:	e01f      	b.n	80011c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001182:	f7ff fd1d 	bl	8000bc0 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d918      	bls.n	80011c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d011      	beq.n	80011c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e007      	b.n	80011d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d1d8      	bne.n	8001182 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	431bde83 	.word	0x431bde83

080011e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d12e      	bne.n	800125c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800120e:	f7ff fcd7 	bl	8000bc0 <HAL_GetTick>
 8001212:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001214:	e01b      	b.n	800124e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001216:	f7ff fcd3 	bl	8000bc0 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d914      	bls.n	800124e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10d      	bne.n	800124e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	f043 0210 	orr.w	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e007      	b.n	800125e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b01      	cmp	r3, #1
 800125a:	d0dc      	beq.n	8001216 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <__NVIC_EnableIRQ+0x34>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff2d 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff42 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff35 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e169      	b.n	800176c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8158 	bne.w	8001766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a9a      	ldr	r2, [pc, #616]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d05e      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014c0:	4a98      	ldr	r2, [pc, #608]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d875      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014c6:	4a98      	ldr	r2, [pc, #608]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d058      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014cc:	4a96      	ldr	r2, [pc, #600]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d86f      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014d2:	4a96      	ldr	r2, [pc, #600]	; (800172c <HAL_GPIO_Init+0x2a8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d052      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014d8:	4a94      	ldr	r2, [pc, #592]	; (800172c <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d869      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014de:	4a94      	ldr	r2, [pc, #592]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04c      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014e4:	4a92      	ldr	r2, [pc, #584]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d863      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014ea:	4a92      	ldr	r2, [pc, #584]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d046      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014f0:	4a90      	ldr	r2, [pc, #576]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d85d      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d82a      	bhi.n	8001550 <HAL_GPIO_Init+0xcc>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d859      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <HAL_GPIO_Init+0x80>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157f 	.word	0x0800157f
 8001508:	08001559 	.word	0x08001559
 800150c:	0800156b 	.word	0x0800156b
 8001510:	080015ad 	.word	0x080015ad
 8001514:	080015b3 	.word	0x080015b3
 8001518:	080015b3 	.word	0x080015b3
 800151c:	080015b3 	.word	0x080015b3
 8001520:	080015b3 	.word	0x080015b3
 8001524:	080015b3 	.word	0x080015b3
 8001528:	080015b3 	.word	0x080015b3
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015b3 	.word	0x080015b3
 8001534:	080015b3 	.word	0x080015b3
 8001538:	080015b3 	.word	0x080015b3
 800153c:	080015b3 	.word	0x080015b3
 8001540:	080015b3 	.word	0x080015b3
 8001544:	080015b3 	.word	0x080015b3
 8001548:	08001561 	.word	0x08001561
 800154c:	08001575 	.word	0x08001575
 8001550:	4a79      	ldr	r2, [pc, #484]	; (8001738 <HAL_GPIO_Init+0x2b4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e02c      	b.n	80015b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e029      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e024      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	3308      	adds	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	330c      	adds	r3, #12
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e01a      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e013      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	611a      	str	r2, [r3, #16]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	615a      	str	r2, [r3, #20]
          break;
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          break;
 80015b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d801      	bhi.n	80015be <HAL_GPIO_Init+0x13a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_Init+0x13e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d802      	bhi.n	80015d0 <HAL_GPIO_Init+0x14c>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x152>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	3b08      	subs	r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	210f      	movs	r1, #15
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80b1 	beq.w	8001766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <HAL_GPIO_Init+0x2b8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x2b8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HAL_GPIO_Init+0x2b8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800161c:	4a48      	ldr	r2, [pc, #288]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1ec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1e8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3e      	ldr	r2, [pc, #248]	; (800174c <HAL_GPIO_Init+0x2c8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1e0>
 8001660:	2303      	movs	r3, #3
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001664:	2304      	movs	r3, #4
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001670:	2300      	movs	r3, #0
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001682:	492f      	ldr	r1, [pc, #188]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	492c      	ldr	r1, [pc, #176]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4928      	ldr	r1, [pc, #160]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4922      	ldr	r1, [pc, #136]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	491e      	ldr	r1, [pc, #120]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4918      	ldr	r1, [pc, #96]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4914      	ldr	r1, [pc, #80]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 8001704:	4013      	ands	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d021      	beq.n	8001758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
 8001720:	e021      	b.n	8001766 <HAL_GPIO_Init+0x2e2>
 8001722:	bf00      	nop
 8001724:	10320000 	.word	0x10320000
 8001728:	10310000 	.word	0x10310000
 800172c:	10220000 	.word	0x10220000
 8001730:	10210000 	.word	0x10210000
 8001734:	10120000 	.word	0x10120000
 8001738:	10110000 	.word	0x10110000
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	40011400 	.word	0x40011400
 8001754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_GPIO_Init+0x304>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	43db      	mvns	r3, r3
 8001760:	4909      	ldr	r1, [pc, #36]	; (8001788 <HAL_GPIO_Init+0x304>)
 8001762:	4013      	ands	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3301      	adds	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f ae8e 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	372c      	adds	r7, #44	; 0x2c
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	611a      	str	r2, [r3, #16]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e272      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017dc:	4b92      	ldr	r3, [pc, #584]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00c      	beq.n	8001802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
 80017f4:	4b8c      	ldr	r3, [pc, #560]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d06c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x12c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d168      	bne.n	80018e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e24c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x76>
 8001824:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a7f      	ldr	r2, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e02e      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x98>
 800183a:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xbc>
 800185e:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a71      	ldr	r2, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001878:	4b6b      	ldr	r3, [pc, #428]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a67      	ldr	r2, [pc, #412]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f992 	bl	8000bc0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f98e 	bl	8000bc0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e200      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe4>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff f97e 	bl	8000bc0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f97a 	bl	8000bc0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1ec      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x10c>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
 800190e:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1c0      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4939      	ldr	r1, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f933 	bl	8000bc0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff f92f 	bl	8000bc0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1a1      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f912 	bl	8000bc0 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff f90e 	bl	8000bc0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e180      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03a      	beq.n	8001a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d019      	beq.n	8001a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff f8f2 	bl	8000bc0 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff f8ee 	bl	8000bc0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e160      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f000 fad8 	bl	8001fb4 <RCC_Delay>
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f8d8 	bl	8000bc0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a12:	e00f      	b.n	8001a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff f8d4 	bl	8000bc0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d908      	bls.n	8001a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e146      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	42420000 	.word	0x42420000
 8001a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e9      	bne.n	8001a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a6 	beq.w	8001b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a52:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b88      	ldr	r3, [pc, #544]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a87      	ldr	r2, [pc, #540]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b85      	ldr	r3, [pc, #532]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b82      	ldr	r3, [pc, #520]	; (8001c84 <HAL_RCC_OscConfig+0x4c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b7f      	ldr	r3, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x4c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	; (8001c84 <HAL_RCC_OscConfig+0x4c8>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f895 	bl	8000bc0 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff f891 	bl	8000bc0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e103      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b75      	ldr	r3, [pc, #468]	; (8001c84 <HAL_RCC_OscConfig+0x4c8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x312>
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a6e      	ldr	r2, [pc, #440]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e02d      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x334>
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a66      	ldr	r2, [pc, #408]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	e01c      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x356>
 8001af8:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a60      	ldr	r2, [pc, #384]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a5d      	ldr	r2, [pc, #372]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001b12:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a5a      	ldr	r2, [pc, #360]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f845 	bl	8000bc0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff f841 	bl	8000bc0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0b1      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCC_OscConfig+0x37e>
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f82f 	bl	8000bc0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff f82b 	bl	8000bc0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e09b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ee      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d061      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d146      	bne.n	8001c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_RCC_OscConfig+0x4cc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7fe ffff 	bl	8000bc0 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7fe fffb 	bl	8000bc0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e06d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4921      	ldr	r1, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a19      	ldr	r1, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	430b      	orrs	r3, r1
 8001c12:	491b      	ldr	r1, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x4cc>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7fe ffcf 	bl	8000bc0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe ffcb 	bl	8000bc0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e03d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46a>
 8001c44:	e035      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ffb8 	bl	8000bc0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe ffb4 	bl	8000bc0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e026      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x498>
 8001c72:	e01e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e019      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_OscConfig+0x500>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d0      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4965      	ldr	r1, [pc, #404]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b8      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	494d      	ldr	r1, [pc, #308]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d040      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d115      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e07f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e073      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06b      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4936      	ldr	r1, [pc, #216]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7fe ff06 	bl	8000bc0 <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7fe ff02 	bl	8000bc0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e053      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 020c 	and.w	r2, r3, #12
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1eb      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d210      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4922      	ldr	r1, [pc, #136]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e032      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4916      	ldr	r1, [pc, #88]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490e      	ldr	r1, [pc, #56]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4e:	f000 f821 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490a      	ldr	r1, [pc, #40]	; (8001e88 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1cc>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1d0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fe64 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08003730 	.word	0x08003730
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	20000010 	.word	0x20000010

08001e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b490      	push	{r4, r7}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e9c:	1d3c      	adds	r4, r7, #4
 8001e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ea4:	f240 2301 	movw	r3, #513	; 0x201
 8001ea8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x46>
 8001ed2:	e02b      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ed6:	623b      	str	r3, [r7, #32]
      break;
 8001ed8:	e02b      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3328      	adds	r3, #40	; 0x28
 8001ee4:	443b      	add	r3, r7
 8001ee6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0c5b      	lsrs	r3, r3, #17
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	3328      	adds	r3, #40	; 0x28
 8001f02:	443b      	add	r3, r7
 8001f04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0e:	fb03 f202 	mul.w	r2, r3, r2
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	e004      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	623b      	str	r3, [r7, #32]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc90      	pop	{r4, r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	08003720 	.word	0x08003720
 8001f44:	40021000 	.word	0x40021000
 8001f48:	007a1200 	.word	0x007a1200
 8001f4c:	003d0900 	.word	0x003d0900

08001f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b02      	ldr	r3, [pc, #8]	; (8001f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	2000000c 	.word	0x2000000c

08001f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f68:	f7ff fff2 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003740 	.word	0x08003740

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0adb      	lsrs	r3, r3, #11
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	08003740 	.word	0x08003740

08001fb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <RCC_Delay+0x34>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <RCC_Delay+0x38>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0a5b      	lsrs	r3, r3, #9
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fd0:	bf00      	nop
  }
  while (Delay --);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	60fa      	str	r2, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f9      	bne.n	8001fd0 <RCC_Delay+0x1c>
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	10624dd3 	.word	0x10624dd3

08001ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d07d      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002010:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10d      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002026:	61d3      	str	r3, [r2, #28]
 8002028:	4b49      	ldr	r3, [pc, #292]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d118      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002050:	f7fe fdb6 	bl	8000bc0 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	e008      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002058:	f7fe fdb2 	bl	8000bc0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e06d      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d02e      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d027      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020aa:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d014      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fd81 	bl	8000bc0 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fd7d 	bl	8000bc0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e036      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4917      	ldr	r1, [pc, #92]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	490b      	ldr	r1, [pc, #44]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	42420440 	.word	0x42420440

0800215c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e041      	b.n	80021f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fbc2 	bl	800090c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 fa70 	bl	8002680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e03a      	b.n	800228a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_TIM_Base_Start_IT+0x98>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d009      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_TIM_Base_Start_IT+0x9c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_TIM_Base_Start_IT+0xa0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d010      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	e007      	b.n	8002288 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800

080022a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f9b1 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f9a4 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f9b3 	bl	800265c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0204 	mvn.w	r2, #4
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f987 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f97a 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f989 	bl	800265c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b08      	cmp	r3, #8
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0208 	mvn.w	r2, #8
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2204      	movs	r2, #4
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f95d 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f950 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f95f 	bl	800265c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0210 	mvn.w	r2, #16
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2208      	movs	r2, #8
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f933 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f926 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f935 	bl	800265c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0201 	mvn.w	r2, #1
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe f92a 	bl	8000678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa77 	bl	800293e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f8f9 	bl	800266e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0220 	mvn.w	r2, #32
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa42 	bl	800292c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_TIM_ConfigClockSource+0x18>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0b3      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x180>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002500:	d03e      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0xd0>
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002506:	f200 8087 	bhi.w	8002618 <HAL_TIM_ConfigClockSource+0x168>
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250e:	f000 8085 	beq.w	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d87f      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002518:	2b70      	cmp	r3, #112	; 0x70
 800251a:	d01a      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xa2>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d87b      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002520:	2b60      	cmp	r3, #96	; 0x60
 8002522:	d050      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x116>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d877      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002528:	2b50      	cmp	r3, #80	; 0x50
 800252a:	d03c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xf6>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d873      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d058      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x136>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d86f      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002538:	2b30      	cmp	r3, #48	; 0x30
 800253a:	d064      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x156>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d86b      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002540:	2b20      	cmp	r3, #32
 8002542:	d060      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x156>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d867      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d05c      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x156>
 800254c:	2b10      	cmp	r3, #16
 800254e:	d05a      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002550:	e062      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f000 f966 	bl	8002832 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002574:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	609a      	str	r2, [r3, #8]
      break;
 800257e:	e04e      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f000 f94f 	bl	8002832 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a2:	609a      	str	r2, [r3, #8]
      break;
 80025a4:	e03b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f000 f8c6 	bl	8002744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2150      	movs	r1, #80	; 0x50
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f91d 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80025c4:	e02b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f000 f8e4 	bl	80027a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2160      	movs	r1, #96	; 0x60
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f90d 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80025e4:	e01b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 f8a6 	bl	8002744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f8fd 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002604:	e00b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f000 f8f4 	bl	80027fe <TIM_ITRx_SetConfig>
        break;
 8002616:	e002      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002618:	bf00      	nop
 800261a:	e000      	b.n	800261e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800261c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a29      	ldr	r2, [pc, #164]	; (8002738 <TIM_Base_SetConfig+0xb8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00b      	beq.n	80026b0 <TIM_Base_SetConfig+0x30>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269e:	d007      	beq.n	80026b0 <TIM_Base_SetConfig+0x30>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a26      	ldr	r2, [pc, #152]	; (800273c <TIM_Base_SetConfig+0xbc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <TIM_Base_SetConfig+0x30>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a25      	ldr	r2, [pc, #148]	; (8002740 <TIM_Base_SetConfig+0xc0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d108      	bne.n	80026c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <TIM_Base_SetConfig+0xb8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <TIM_Base_SetConfig+0x62>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0x62>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <TIM_Base_SetConfig+0xbc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0x62>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a18      	ldr	r2, [pc, #96]	; (8002740 <TIM_Base_SetConfig+0xc0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <TIM_Base_SetConfig+0xb8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d103      	bne.n	8002728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	615a      	str	r2, [r3, #20]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800

08002744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0201 	bic.w	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 030a 	bic.w	r3, r3, #10
 8002780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f023 0210 	bic.w	r2, r3, #16
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	031b      	lsls	r3, r3, #12
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	f043 0307 	orr.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	431a      	orrs	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4313      	orrs	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002884:	2302      	movs	r3, #2
 8002886:	e046      	b.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d009      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10c      	bne.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800

0800292c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e03f      	b.n	80029e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fd ffec 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f96d 	bl	8002c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08a      	sub	sp, #40	; 0x28
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d17c      	bne.n	8002b04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_UART_Transmit+0x2c>
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e075      	b.n	8002b06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Transmit+0x3e>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e06e      	b.n	8002b06 <HAL_UART_Transmit+0x11c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2221      	movs	r2, #33	; 0x21
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe f8bf 	bl	8000bc0 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	d108      	bne.n	8002a6c <HAL_UART_Transmit+0x82>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e003      	b.n	8002a74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a7c:	e02a      	b.n	8002ad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f870 	bl	8002b6e <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e036      	b.n	8002b06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	e007      	b.n	8002ac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1cf      	bne.n	8002a7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f840 	bl	8002b6e <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e006      	b.n	8002b06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d11d      	bne.n	8002b64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_UART_Receive_IT+0x26>
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e016      	b.n	8002b66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Receive_IT+0x38>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e00f      	b.n	8002b66 <HAL_UART_Receive_IT+0x58>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f851 	bl	8002c02 <UART_Start_Receive_IT>
 8002b60:	4603      	mov	r3, r0
 8002b62:	e000      	b.n	8002b66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7e:	e02c      	b.n	8002bda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d028      	beq.n	8002bda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b8e:	f7fe f817 	bl	8000bc0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d21d      	bcs.n	8002bda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e00f      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d0c3      	beq.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2222      	movs	r2, #34	; 0x22
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c46:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cae:	f023 030c 	bic.w	r3, r3, #12
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <UART_SetConfig+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d103      	bne.n	8002ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cdc:	f7ff f956 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	e002      	b.n	8002cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f7ff f93e 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009a      	lsls	r2, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <UART_SetConfig+0x118>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	0119      	lsls	r1, r3, #4
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009a      	lsls	r2, r3, #2
 8002d14:	441a      	add	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <UART_SetConfig+0x118>)
 8002d22:	fba3 0302 	umull	r0, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	fb00 f303 	mul.w	r3, r0, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	; 0x32
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <UART_SetConfig+0x118>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d40:	4419      	add	r1, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <UART_SetConfig+0x118>)
 8002d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2064      	movs	r0, #100	; 0x64
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	3332      	adds	r3, #50	; 0x32
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <UART_SetConfig+0x118>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	f003 020f 	and.w	r2, r3, #15
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	51eb851f 	.word	0x51eb851f

08002d90 <__errno>:
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <__errno+0x8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000018 	.word	0x20000018

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2600      	movs	r6, #0
 8002da0:	4d0c      	ldr	r5, [pc, #48]	; (8002dd4 <__libc_init_array+0x38>)
 8002da2:	4c0d      	ldr	r4, [pc, #52]	; (8002dd8 <__libc_init_array+0x3c>)
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	f000 fc9c 	bl	80036e8 <_init>
 8002db0:	2600      	movs	r6, #0
 8002db2:	4d0a      	ldr	r5, [pc, #40]	; (8002ddc <__libc_init_array+0x40>)
 8002db4:	4c0a      	ldr	r4, [pc, #40]	; (8002de0 <__libc_init_array+0x44>)
 8002db6:	1b64      	subs	r4, r4, r5
 8002db8:	10a4      	asrs	r4, r4, #2
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	0800377c 	.word	0x0800377c
 8002dd8:	0800377c 	.word	0x0800377c
 8002ddc:	0800377c 	.word	0x0800377c
 8002de0:	08003780 	.word	0x08003780

08002de4 <memset>:
 8002de4:	4603      	mov	r3, r0
 8002de6:	4402      	add	r2, r0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d100      	bne.n	8002dee <memset+0xa>
 8002dec:	4770      	bx	lr
 8002dee:	f803 1b01 	strb.w	r1, [r3], #1
 8002df2:	e7f9      	b.n	8002de8 <memset+0x4>

08002df4 <siprintf>:
 8002df4:	b40e      	push	{r1, r2, r3}
 8002df6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dfa:	b500      	push	{lr}
 8002dfc:	b09c      	sub	sp, #112	; 0x70
 8002dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8002e00:	9002      	str	r0, [sp, #8]
 8002e02:	9006      	str	r0, [sp, #24]
 8002e04:	9107      	str	r1, [sp, #28]
 8002e06:	9104      	str	r1, [sp, #16]
 8002e08:	4808      	ldr	r0, [pc, #32]	; (8002e2c <siprintf+0x38>)
 8002e0a:	4909      	ldr	r1, [pc, #36]	; (8002e30 <siprintf+0x3c>)
 8002e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e10:	9105      	str	r1, [sp, #20]
 8002e12:	6800      	ldr	r0, [r0, #0]
 8002e14:	a902      	add	r1, sp, #8
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	f000 f868 	bl	8002eec <_svfiprintf_r>
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	9b02      	ldr	r3, [sp, #8]
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	b01c      	add	sp, #112	; 0x70
 8002e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e28:	b003      	add	sp, #12
 8002e2a:	4770      	bx	lr
 8002e2c:	20000018 	.word	0x20000018
 8002e30:	ffff0208 	.word	0xffff0208

08002e34 <__ssputs_r>:
 8002e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e38:	688e      	ldr	r6, [r1, #8]
 8002e3a:	4682      	mov	sl, r0
 8002e3c:	429e      	cmp	r6, r3
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4690      	mov	r8, r2
 8002e42:	461f      	mov	r7, r3
 8002e44:	d838      	bhi.n	8002eb8 <__ssputs_r+0x84>
 8002e46:	898a      	ldrh	r2, [r1, #12]
 8002e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e4c:	d032      	beq.n	8002eb4 <__ssputs_r+0x80>
 8002e4e:	6825      	ldr	r5, [r4, #0]
 8002e50:	6909      	ldr	r1, [r1, #16]
 8002e52:	3301      	adds	r3, #1
 8002e54:	eba5 0901 	sub.w	r9, r5, r1
 8002e58:	6965      	ldr	r5, [r4, #20]
 8002e5a:	444b      	add	r3, r9
 8002e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e64:	106d      	asrs	r5, r5, #1
 8002e66:	429d      	cmp	r5, r3
 8002e68:	bf38      	it	cc
 8002e6a:	461d      	movcc	r5, r3
 8002e6c:	0553      	lsls	r3, r2, #21
 8002e6e:	d531      	bpl.n	8002ed4 <__ssputs_r+0xa0>
 8002e70:	4629      	mov	r1, r5
 8002e72:	f000 fb6f 	bl	8003554 <_malloc_r>
 8002e76:	4606      	mov	r6, r0
 8002e78:	b950      	cbnz	r0, 8002e90 <__ssputs_r+0x5c>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f8ca 3000 	str.w	r3, [sl]
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e90:	464a      	mov	r2, r9
 8002e92:	6921      	ldr	r1, [r4, #16]
 8002e94:	f000 face 	bl	8003434 <memcpy>
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea2:	81a3      	strh	r3, [r4, #12]
 8002ea4:	6126      	str	r6, [r4, #16]
 8002ea6:	444e      	add	r6, r9
 8002ea8:	6026      	str	r6, [r4, #0]
 8002eaa:	463e      	mov	r6, r7
 8002eac:	6165      	str	r5, [r4, #20]
 8002eae:	eba5 0509 	sub.w	r5, r5, r9
 8002eb2:	60a5      	str	r5, [r4, #8]
 8002eb4:	42be      	cmp	r6, r7
 8002eb6:	d900      	bls.n	8002eba <__ssputs_r+0x86>
 8002eb8:	463e      	mov	r6, r7
 8002eba:	4632      	mov	r2, r6
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	6820      	ldr	r0, [r4, #0]
 8002ec0:	f000 fac6 	bl	8003450 <memmove>
 8002ec4:	68a3      	ldr	r3, [r4, #8]
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	1b9b      	subs	r3, r3, r6
 8002eca:	60a3      	str	r3, [r4, #8]
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	4433      	add	r3, r6
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	e7db      	b.n	8002e8c <__ssputs_r+0x58>
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	f000 fbb1 	bl	800363c <_realloc_r>
 8002eda:	4606      	mov	r6, r0
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1e1      	bne.n	8002ea4 <__ssputs_r+0x70>
 8002ee0:	4650      	mov	r0, sl
 8002ee2:	6921      	ldr	r1, [r4, #16]
 8002ee4:	f000 face 	bl	8003484 <_free_r>
 8002ee8:	e7c7      	b.n	8002e7a <__ssputs_r+0x46>
	...

08002eec <_svfiprintf_r>:
 8002eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef0:	4698      	mov	r8, r3
 8002ef2:	898b      	ldrh	r3, [r1, #12]
 8002ef4:	4607      	mov	r7, r0
 8002ef6:	061b      	lsls	r3, r3, #24
 8002ef8:	460d      	mov	r5, r1
 8002efa:	4614      	mov	r4, r2
 8002efc:	b09d      	sub	sp, #116	; 0x74
 8002efe:	d50e      	bpl.n	8002f1e <_svfiprintf_r+0x32>
 8002f00:	690b      	ldr	r3, [r1, #16]
 8002f02:	b963      	cbnz	r3, 8002f1e <_svfiprintf_r+0x32>
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	f000 fb25 	bl	8003554 <_malloc_r>
 8002f0a:	6028      	str	r0, [r5, #0]
 8002f0c:	6128      	str	r0, [r5, #16]
 8002f0e:	b920      	cbnz	r0, 8002f1a <_svfiprintf_r+0x2e>
 8002f10:	230c      	movs	r3, #12
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	e0d1      	b.n	80030be <_svfiprintf_r+0x1d2>
 8002f1a:	2340      	movs	r3, #64	; 0x40
 8002f1c:	616b      	str	r3, [r5, #20]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9309      	str	r3, [sp, #36]	; 0x24
 8002f22:	2320      	movs	r3, #32
 8002f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f28:	2330      	movs	r3, #48	; 0x30
 8002f2a:	f04f 0901 	mov.w	r9, #1
 8002f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030d8 <_svfiprintf_r+0x1ec>
 8002f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	469a      	mov	sl, r3
 8002f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f42:	b10a      	cbz	r2, 8002f48 <_svfiprintf_r+0x5c>
 8002f44:	2a25      	cmp	r2, #37	; 0x25
 8002f46:	d1f9      	bne.n	8002f3c <_svfiprintf_r+0x50>
 8002f48:	ebba 0b04 	subs.w	fp, sl, r4
 8002f4c:	d00b      	beq.n	8002f66 <_svfiprintf_r+0x7a>
 8002f4e:	465b      	mov	r3, fp
 8002f50:	4622      	mov	r2, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	4638      	mov	r0, r7
 8002f56:	f7ff ff6d 	bl	8002e34 <__ssputs_r>
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	f000 80aa 	beq.w	80030b4 <_svfiprintf_r+0x1c8>
 8002f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f62:	445a      	add	r2, fp
 8002f64:	9209      	str	r2, [sp, #36]	; 0x24
 8002f66:	f89a 3000 	ldrb.w	r3, [sl]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80a2 	beq.w	80030b4 <_svfiprintf_r+0x1c8>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f04f 32ff 	mov.w	r2, #4294967295
 8002f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f7a:	f10a 0a01 	add.w	sl, sl, #1
 8002f7e:	9304      	str	r3, [sp, #16]
 8002f80:	9307      	str	r3, [sp, #28]
 8002f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f86:	931a      	str	r3, [sp, #104]	; 0x68
 8002f88:	4654      	mov	r4, sl
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f90:	4851      	ldr	r0, [pc, #324]	; (80030d8 <_svfiprintf_r+0x1ec>)
 8002f92:	f000 fa41 	bl	8003418 <memchr>
 8002f96:	9a04      	ldr	r2, [sp, #16]
 8002f98:	b9d8      	cbnz	r0, 8002fd2 <_svfiprintf_r+0xe6>
 8002f9a:	06d0      	lsls	r0, r2, #27
 8002f9c:	bf44      	itt	mi
 8002f9e:	2320      	movmi	r3, #32
 8002fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fa4:	0711      	lsls	r1, r2, #28
 8002fa6:	bf44      	itt	mi
 8002fa8:	232b      	movmi	r3, #43	; 0x2b
 8002faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fae:	f89a 3000 	ldrb.w	r3, [sl]
 8002fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb4:	d015      	beq.n	8002fe2 <_svfiprintf_r+0xf6>
 8002fb6:	4654      	mov	r4, sl
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f04f 0c0a 	mov.w	ip, #10
 8002fbe:	9a07      	ldr	r2, [sp, #28]
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc6:	3b30      	subs	r3, #48	; 0x30
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	d94e      	bls.n	800306a <_svfiprintf_r+0x17e>
 8002fcc:	b1b0      	cbz	r0, 8002ffc <_svfiprintf_r+0x110>
 8002fce:	9207      	str	r2, [sp, #28]
 8002fd0:	e014      	b.n	8002ffc <_svfiprintf_r+0x110>
 8002fd2:	eba0 0308 	sub.w	r3, r0, r8
 8002fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	46a2      	mov	sl, r4
 8002fde:	9304      	str	r3, [sp, #16]
 8002fe0:	e7d2      	b.n	8002f88 <_svfiprintf_r+0x9c>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	1d19      	adds	r1, r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	9103      	str	r1, [sp, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfbb      	ittet	lt
 8002fee:	425b      	neglt	r3, r3
 8002ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ff4:	9307      	strge	r3, [sp, #28]
 8002ff6:	9307      	strlt	r3, [sp, #28]
 8002ff8:	bfb8      	it	lt
 8002ffa:	9204      	strlt	r2, [sp, #16]
 8002ffc:	7823      	ldrb	r3, [r4, #0]
 8002ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8003000:	d10c      	bne.n	800301c <_svfiprintf_r+0x130>
 8003002:	7863      	ldrb	r3, [r4, #1]
 8003004:	2b2a      	cmp	r3, #42	; 0x2a
 8003006:	d135      	bne.n	8003074 <_svfiprintf_r+0x188>
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	3402      	adds	r4, #2
 800300c:	1d1a      	adds	r2, r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	9203      	str	r2, [sp, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	bfb8      	it	lt
 8003016:	f04f 33ff 	movlt.w	r3, #4294967295
 800301a:	9305      	str	r3, [sp, #20]
 800301c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80030dc <_svfiprintf_r+0x1f0>
 8003020:	2203      	movs	r2, #3
 8003022:	4650      	mov	r0, sl
 8003024:	7821      	ldrb	r1, [r4, #0]
 8003026:	f000 f9f7 	bl	8003418 <memchr>
 800302a:	b140      	cbz	r0, 800303e <_svfiprintf_r+0x152>
 800302c:	2340      	movs	r3, #64	; 0x40
 800302e:	eba0 000a 	sub.w	r0, r0, sl
 8003032:	fa03 f000 	lsl.w	r0, r3, r0
 8003036:	9b04      	ldr	r3, [sp, #16]
 8003038:	3401      	adds	r4, #1
 800303a:	4303      	orrs	r3, r0
 800303c:	9304      	str	r3, [sp, #16]
 800303e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003042:	2206      	movs	r2, #6
 8003044:	4826      	ldr	r0, [pc, #152]	; (80030e0 <_svfiprintf_r+0x1f4>)
 8003046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800304a:	f000 f9e5 	bl	8003418 <memchr>
 800304e:	2800      	cmp	r0, #0
 8003050:	d038      	beq.n	80030c4 <_svfiprintf_r+0x1d8>
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <_svfiprintf_r+0x1f8>)
 8003054:	bb1b      	cbnz	r3, 800309e <_svfiprintf_r+0x1b2>
 8003056:	9b03      	ldr	r3, [sp, #12]
 8003058:	3307      	adds	r3, #7
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	3308      	adds	r3, #8
 8003060:	9303      	str	r3, [sp, #12]
 8003062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003064:	4433      	add	r3, r6
 8003066:	9309      	str	r3, [sp, #36]	; 0x24
 8003068:	e767      	b.n	8002f3a <_svfiprintf_r+0x4e>
 800306a:	460c      	mov	r4, r1
 800306c:	2001      	movs	r0, #1
 800306e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003072:	e7a5      	b.n	8002fc0 <_svfiprintf_r+0xd4>
 8003074:	2300      	movs	r3, #0
 8003076:	f04f 0c0a 	mov.w	ip, #10
 800307a:	4619      	mov	r1, r3
 800307c:	3401      	adds	r4, #1
 800307e:	9305      	str	r3, [sp, #20]
 8003080:	4620      	mov	r0, r4
 8003082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003086:	3a30      	subs	r2, #48	; 0x30
 8003088:	2a09      	cmp	r2, #9
 800308a:	d903      	bls.n	8003094 <_svfiprintf_r+0x1a8>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0c5      	beq.n	800301c <_svfiprintf_r+0x130>
 8003090:	9105      	str	r1, [sp, #20]
 8003092:	e7c3      	b.n	800301c <_svfiprintf_r+0x130>
 8003094:	4604      	mov	r4, r0
 8003096:	2301      	movs	r3, #1
 8003098:	fb0c 2101 	mla	r1, ip, r1, r2
 800309c:	e7f0      	b.n	8003080 <_svfiprintf_r+0x194>
 800309e:	ab03      	add	r3, sp, #12
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	462a      	mov	r2, r5
 80030a4:	4638      	mov	r0, r7
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <_svfiprintf_r+0x1fc>)
 80030a8:	a904      	add	r1, sp, #16
 80030aa:	f3af 8000 	nop.w
 80030ae:	1c42      	adds	r2, r0, #1
 80030b0:	4606      	mov	r6, r0
 80030b2:	d1d6      	bne.n	8003062 <_svfiprintf_r+0x176>
 80030b4:	89ab      	ldrh	r3, [r5, #12]
 80030b6:	065b      	lsls	r3, r3, #25
 80030b8:	f53f af2c 	bmi.w	8002f14 <_svfiprintf_r+0x28>
 80030bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030be:	b01d      	add	sp, #116	; 0x74
 80030c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c4:	ab03      	add	r3, sp, #12
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	462a      	mov	r2, r5
 80030ca:	4638      	mov	r0, r7
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <_svfiprintf_r+0x1fc>)
 80030ce:	a904      	add	r1, sp, #16
 80030d0:	f000 f87c 	bl	80031cc <_printf_i>
 80030d4:	e7eb      	b.n	80030ae <_svfiprintf_r+0x1c2>
 80030d6:	bf00      	nop
 80030d8:	08003748 	.word	0x08003748
 80030dc:	0800374e 	.word	0x0800374e
 80030e0:	08003752 	.word	0x08003752
 80030e4:	00000000 	.word	0x00000000
 80030e8:	08002e35 	.word	0x08002e35

080030ec <_printf_common>:
 80030ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f0:	4616      	mov	r6, r2
 80030f2:	4699      	mov	r9, r3
 80030f4:	688a      	ldr	r2, [r1, #8]
 80030f6:	690b      	ldr	r3, [r1, #16]
 80030f8:	4607      	mov	r7, r0
 80030fa:	4293      	cmp	r3, r2
 80030fc:	bfb8      	it	lt
 80030fe:	4613      	movlt	r3, r2
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003106:	460c      	mov	r4, r1
 8003108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800310c:	b10a      	cbz	r2, 8003112 <_printf_common+0x26>
 800310e:	3301      	adds	r3, #1
 8003110:	6033      	str	r3, [r6, #0]
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	0699      	lsls	r1, r3, #26
 8003116:	bf42      	ittt	mi
 8003118:	6833      	ldrmi	r3, [r6, #0]
 800311a:	3302      	addmi	r3, #2
 800311c:	6033      	strmi	r3, [r6, #0]
 800311e:	6825      	ldr	r5, [r4, #0]
 8003120:	f015 0506 	ands.w	r5, r5, #6
 8003124:	d106      	bne.n	8003134 <_printf_common+0x48>
 8003126:	f104 0a19 	add.w	sl, r4, #25
 800312a:	68e3      	ldr	r3, [r4, #12]
 800312c:	6832      	ldr	r2, [r6, #0]
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	42ab      	cmp	r3, r5
 8003132:	dc28      	bgt.n	8003186 <_printf_common+0x9a>
 8003134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003138:	1e13      	subs	r3, r2, #0
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	bf18      	it	ne
 800313e:	2301      	movne	r3, #1
 8003140:	0692      	lsls	r2, r2, #26
 8003142:	d42d      	bmi.n	80031a0 <_printf_common+0xb4>
 8003144:	4649      	mov	r1, r9
 8003146:	4638      	mov	r0, r7
 8003148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800314c:	47c0      	blx	r8
 800314e:	3001      	adds	r0, #1
 8003150:	d020      	beq.n	8003194 <_printf_common+0xa8>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	68e5      	ldr	r5, [r4, #12]
 8003156:	f003 0306 	and.w	r3, r3, #6
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf18      	it	ne
 800315e:	2500      	movne	r5, #0
 8003160:	6832      	ldr	r2, [r6, #0]
 8003162:	f04f 0600 	mov.w	r6, #0
 8003166:	68a3      	ldr	r3, [r4, #8]
 8003168:	bf08      	it	eq
 800316a:	1aad      	subeq	r5, r5, r2
 800316c:	6922      	ldr	r2, [r4, #16]
 800316e:	bf08      	it	eq
 8003170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003174:	4293      	cmp	r3, r2
 8003176:	bfc4      	itt	gt
 8003178:	1a9b      	subgt	r3, r3, r2
 800317a:	18ed      	addgt	r5, r5, r3
 800317c:	341a      	adds	r4, #26
 800317e:	42b5      	cmp	r5, r6
 8003180:	d11a      	bne.n	80031b8 <_printf_common+0xcc>
 8003182:	2000      	movs	r0, #0
 8003184:	e008      	b.n	8003198 <_printf_common+0xac>
 8003186:	2301      	movs	r3, #1
 8003188:	4652      	mov	r2, sl
 800318a:	4649      	mov	r1, r9
 800318c:	4638      	mov	r0, r7
 800318e:	47c0      	blx	r8
 8003190:	3001      	adds	r0, #1
 8003192:	d103      	bne.n	800319c <_printf_common+0xb0>
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	3501      	adds	r5, #1
 800319e:	e7c4      	b.n	800312a <_printf_common+0x3e>
 80031a0:	2030      	movs	r0, #48	; 0x30
 80031a2:	18e1      	adds	r1, r4, r3
 80031a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031ae:	4422      	add	r2, r4
 80031b0:	3302      	adds	r3, #2
 80031b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b6:	e7c5      	b.n	8003144 <_printf_common+0x58>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4622      	mov	r2, r4
 80031bc:	4649      	mov	r1, r9
 80031be:	4638      	mov	r0, r7
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d0e6      	beq.n	8003194 <_printf_common+0xa8>
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7d9      	b.n	800317e <_printf_common+0x92>
	...

080031cc <_printf_i>:
 80031cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	7e0f      	ldrb	r7, [r1, #24]
 80031d2:	4691      	mov	r9, r2
 80031d4:	2f78      	cmp	r7, #120	; 0x78
 80031d6:	4680      	mov	r8, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	469a      	mov	sl, r3
 80031dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031e2:	d807      	bhi.n	80031f4 <_printf_i+0x28>
 80031e4:	2f62      	cmp	r7, #98	; 0x62
 80031e6:	d80a      	bhi.n	80031fe <_printf_i+0x32>
 80031e8:	2f00      	cmp	r7, #0
 80031ea:	f000 80d9 	beq.w	80033a0 <_printf_i+0x1d4>
 80031ee:	2f58      	cmp	r7, #88	; 0x58
 80031f0:	f000 80a4 	beq.w	800333c <_printf_i+0x170>
 80031f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031fc:	e03a      	b.n	8003274 <_printf_i+0xa8>
 80031fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003202:	2b15      	cmp	r3, #21
 8003204:	d8f6      	bhi.n	80031f4 <_printf_i+0x28>
 8003206:	a101      	add	r1, pc, #4	; (adr r1, 800320c <_printf_i+0x40>)
 8003208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800320c:	08003265 	.word	0x08003265
 8003210:	08003279 	.word	0x08003279
 8003214:	080031f5 	.word	0x080031f5
 8003218:	080031f5 	.word	0x080031f5
 800321c:	080031f5 	.word	0x080031f5
 8003220:	080031f5 	.word	0x080031f5
 8003224:	08003279 	.word	0x08003279
 8003228:	080031f5 	.word	0x080031f5
 800322c:	080031f5 	.word	0x080031f5
 8003230:	080031f5 	.word	0x080031f5
 8003234:	080031f5 	.word	0x080031f5
 8003238:	08003387 	.word	0x08003387
 800323c:	080032a9 	.word	0x080032a9
 8003240:	08003369 	.word	0x08003369
 8003244:	080031f5 	.word	0x080031f5
 8003248:	080031f5 	.word	0x080031f5
 800324c:	080033a9 	.word	0x080033a9
 8003250:	080031f5 	.word	0x080031f5
 8003254:	080032a9 	.word	0x080032a9
 8003258:	080031f5 	.word	0x080031f5
 800325c:	080031f5 	.word	0x080031f5
 8003260:	08003371 	.word	0x08003371
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	602a      	str	r2, [r5, #0]
 800326c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003274:	2301      	movs	r3, #1
 8003276:	e0a4      	b.n	80033c2 <_printf_i+0x1f6>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	6829      	ldr	r1, [r5, #0]
 800327c:	0606      	lsls	r6, r0, #24
 800327e:	f101 0304 	add.w	r3, r1, #4
 8003282:	d50a      	bpl.n	800329a <_printf_i+0xce>
 8003284:	680e      	ldr	r6, [r1, #0]
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	2e00      	cmp	r6, #0
 800328a:	da03      	bge.n	8003294 <_printf_i+0xc8>
 800328c:	232d      	movs	r3, #45	; 0x2d
 800328e:	4276      	negs	r6, r6
 8003290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003294:	230a      	movs	r3, #10
 8003296:	485e      	ldr	r0, [pc, #376]	; (8003410 <_printf_i+0x244>)
 8003298:	e019      	b.n	80032ce <_printf_i+0x102>
 800329a:	680e      	ldr	r6, [r1, #0]
 800329c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	bf18      	it	ne
 80032a4:	b236      	sxthne	r6, r6
 80032a6:	e7ef      	b.n	8003288 <_printf_i+0xbc>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	1d19      	adds	r1, r3, #4
 80032ae:	6029      	str	r1, [r5, #0]
 80032b0:	0601      	lsls	r1, r0, #24
 80032b2:	d501      	bpl.n	80032b8 <_printf_i+0xec>
 80032b4:	681e      	ldr	r6, [r3, #0]
 80032b6:	e002      	b.n	80032be <_printf_i+0xf2>
 80032b8:	0646      	lsls	r6, r0, #25
 80032ba:	d5fb      	bpl.n	80032b4 <_printf_i+0xe8>
 80032bc:	881e      	ldrh	r6, [r3, #0]
 80032be:	2f6f      	cmp	r7, #111	; 0x6f
 80032c0:	bf0c      	ite	eq
 80032c2:	2308      	moveq	r3, #8
 80032c4:	230a      	movne	r3, #10
 80032c6:	4852      	ldr	r0, [pc, #328]	; (8003410 <_printf_i+0x244>)
 80032c8:	2100      	movs	r1, #0
 80032ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ce:	6865      	ldr	r5, [r4, #4]
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	bfa8      	it	ge
 80032d4:	6821      	ldrge	r1, [r4, #0]
 80032d6:	60a5      	str	r5, [r4, #8]
 80032d8:	bfa4      	itt	ge
 80032da:	f021 0104 	bicge.w	r1, r1, #4
 80032de:	6021      	strge	r1, [r4, #0]
 80032e0:	b90e      	cbnz	r6, 80032e6 <_printf_i+0x11a>
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	d04d      	beq.n	8003382 <_printf_i+0x1b6>
 80032e6:	4615      	mov	r5, r2
 80032e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80032ec:	fb03 6711 	mls	r7, r3, r1, r6
 80032f0:	5dc7      	ldrb	r7, [r0, r7]
 80032f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032f6:	4637      	mov	r7, r6
 80032f8:	42bb      	cmp	r3, r7
 80032fa:	460e      	mov	r6, r1
 80032fc:	d9f4      	bls.n	80032e8 <_printf_i+0x11c>
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d10b      	bne.n	800331a <_printf_i+0x14e>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	07de      	lsls	r6, r3, #31
 8003306:	d508      	bpl.n	800331a <_printf_i+0x14e>
 8003308:	6923      	ldr	r3, [r4, #16]
 800330a:	6861      	ldr	r1, [r4, #4]
 800330c:	4299      	cmp	r1, r3
 800330e:	bfde      	ittt	le
 8003310:	2330      	movle	r3, #48	; 0x30
 8003312:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003316:	f105 35ff 	addle.w	r5, r5, #4294967295
 800331a:	1b52      	subs	r2, r2, r5
 800331c:	6122      	str	r2, [r4, #16]
 800331e:	464b      	mov	r3, r9
 8003320:	4621      	mov	r1, r4
 8003322:	4640      	mov	r0, r8
 8003324:	f8cd a000 	str.w	sl, [sp]
 8003328:	aa03      	add	r2, sp, #12
 800332a:	f7ff fedf 	bl	80030ec <_printf_common>
 800332e:	3001      	adds	r0, #1
 8003330:	d14c      	bne.n	80033cc <_printf_i+0x200>
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	b004      	add	sp, #16
 8003338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333c:	4834      	ldr	r0, [pc, #208]	; (8003410 <_printf_i+0x244>)
 800333e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003342:	6829      	ldr	r1, [r5, #0]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	f851 6b04 	ldr.w	r6, [r1], #4
 800334a:	6029      	str	r1, [r5, #0]
 800334c:	061d      	lsls	r5, r3, #24
 800334e:	d514      	bpl.n	800337a <_printf_i+0x1ae>
 8003350:	07df      	lsls	r7, r3, #31
 8003352:	bf44      	itt	mi
 8003354:	f043 0320 	orrmi.w	r3, r3, #32
 8003358:	6023      	strmi	r3, [r4, #0]
 800335a:	b91e      	cbnz	r6, 8003364 <_printf_i+0x198>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	f023 0320 	bic.w	r3, r3, #32
 8003362:	6023      	str	r3, [r4, #0]
 8003364:	2310      	movs	r3, #16
 8003366:	e7af      	b.n	80032c8 <_printf_i+0xfc>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	f043 0320 	orr.w	r3, r3, #32
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	2378      	movs	r3, #120	; 0x78
 8003372:	4828      	ldr	r0, [pc, #160]	; (8003414 <_printf_i+0x248>)
 8003374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003378:	e7e3      	b.n	8003342 <_printf_i+0x176>
 800337a:	0659      	lsls	r1, r3, #25
 800337c:	bf48      	it	mi
 800337e:	b2b6      	uxthmi	r6, r6
 8003380:	e7e6      	b.n	8003350 <_printf_i+0x184>
 8003382:	4615      	mov	r5, r2
 8003384:	e7bb      	b.n	80032fe <_printf_i+0x132>
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	6826      	ldr	r6, [r4, #0]
 800338a:	1d18      	adds	r0, r3, #4
 800338c:	6961      	ldr	r1, [r4, #20]
 800338e:	6028      	str	r0, [r5, #0]
 8003390:	0635      	lsls	r5, r6, #24
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	d501      	bpl.n	800339a <_printf_i+0x1ce>
 8003396:	6019      	str	r1, [r3, #0]
 8003398:	e002      	b.n	80033a0 <_printf_i+0x1d4>
 800339a:	0670      	lsls	r0, r6, #25
 800339c:	d5fb      	bpl.n	8003396 <_printf_i+0x1ca>
 800339e:	8019      	strh	r1, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	4615      	mov	r5, r2
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	e7ba      	b.n	800331e <_printf_i+0x152>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	602a      	str	r2, [r5, #0]
 80033b0:	681d      	ldr	r5, [r3, #0]
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f82f 	bl	8003418 <memchr>
 80033ba:	b108      	cbz	r0, 80033c0 <_printf_i+0x1f4>
 80033bc:	1b40      	subs	r0, r0, r5
 80033be:	6060      	str	r0, [r4, #4]
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ca:	e7a8      	b.n	800331e <_printf_i+0x152>
 80033cc:	462a      	mov	r2, r5
 80033ce:	4649      	mov	r1, r9
 80033d0:	4640      	mov	r0, r8
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	47d0      	blx	sl
 80033d6:	3001      	adds	r0, #1
 80033d8:	d0ab      	beq.n	8003332 <_printf_i+0x166>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	079b      	lsls	r3, r3, #30
 80033de:	d413      	bmi.n	8003408 <_printf_i+0x23c>
 80033e0:	68e0      	ldr	r0, [r4, #12]
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	4298      	cmp	r0, r3
 80033e6:	bfb8      	it	lt
 80033e8:	4618      	movlt	r0, r3
 80033ea:	e7a4      	b.n	8003336 <_printf_i+0x16a>
 80033ec:	2301      	movs	r3, #1
 80033ee:	4632      	mov	r2, r6
 80033f0:	4649      	mov	r1, r9
 80033f2:	4640      	mov	r0, r8
 80033f4:	47d0      	blx	sl
 80033f6:	3001      	adds	r0, #1
 80033f8:	d09b      	beq.n	8003332 <_printf_i+0x166>
 80033fa:	3501      	adds	r5, #1
 80033fc:	68e3      	ldr	r3, [r4, #12]
 80033fe:	9903      	ldr	r1, [sp, #12]
 8003400:	1a5b      	subs	r3, r3, r1
 8003402:	42ab      	cmp	r3, r5
 8003404:	dcf2      	bgt.n	80033ec <_printf_i+0x220>
 8003406:	e7eb      	b.n	80033e0 <_printf_i+0x214>
 8003408:	2500      	movs	r5, #0
 800340a:	f104 0619 	add.w	r6, r4, #25
 800340e:	e7f5      	b.n	80033fc <_printf_i+0x230>
 8003410:	08003759 	.word	0x08003759
 8003414:	0800376a 	.word	0x0800376a

08003418 <memchr>:
 8003418:	4603      	mov	r3, r0
 800341a:	b510      	push	{r4, lr}
 800341c:	b2c9      	uxtb	r1, r1
 800341e:	4402      	add	r2, r0
 8003420:	4293      	cmp	r3, r2
 8003422:	4618      	mov	r0, r3
 8003424:	d101      	bne.n	800342a <memchr+0x12>
 8003426:	2000      	movs	r0, #0
 8003428:	e003      	b.n	8003432 <memchr+0x1a>
 800342a:	7804      	ldrb	r4, [r0, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	428c      	cmp	r4, r1
 8003430:	d1f6      	bne.n	8003420 <memchr+0x8>
 8003432:	bd10      	pop	{r4, pc}

08003434 <memcpy>:
 8003434:	440a      	add	r2, r1
 8003436:	4291      	cmp	r1, r2
 8003438:	f100 33ff 	add.w	r3, r0, #4294967295
 800343c:	d100      	bne.n	8003440 <memcpy+0xc>
 800343e:	4770      	bx	lr
 8003440:	b510      	push	{r4, lr}
 8003442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003446:	4291      	cmp	r1, r2
 8003448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800344c:	d1f9      	bne.n	8003442 <memcpy+0xe>
 800344e:	bd10      	pop	{r4, pc}

08003450 <memmove>:
 8003450:	4288      	cmp	r0, r1
 8003452:	b510      	push	{r4, lr}
 8003454:	eb01 0402 	add.w	r4, r1, r2
 8003458:	d902      	bls.n	8003460 <memmove+0x10>
 800345a:	4284      	cmp	r4, r0
 800345c:	4623      	mov	r3, r4
 800345e:	d807      	bhi.n	8003470 <memmove+0x20>
 8003460:	1e43      	subs	r3, r0, #1
 8003462:	42a1      	cmp	r1, r4
 8003464:	d008      	beq.n	8003478 <memmove+0x28>
 8003466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800346a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800346e:	e7f8      	b.n	8003462 <memmove+0x12>
 8003470:	4601      	mov	r1, r0
 8003472:	4402      	add	r2, r0
 8003474:	428a      	cmp	r2, r1
 8003476:	d100      	bne.n	800347a <memmove+0x2a>
 8003478:	bd10      	pop	{r4, pc}
 800347a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800347e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003482:	e7f7      	b.n	8003474 <memmove+0x24>

08003484 <_free_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4605      	mov	r5, r0
 8003488:	2900      	cmp	r1, #0
 800348a:	d040      	beq.n	800350e <_free_r+0x8a>
 800348c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003490:	1f0c      	subs	r4, r1, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfb8      	it	lt
 8003496:	18e4      	addlt	r4, r4, r3
 8003498:	f000 f910 	bl	80036bc <__malloc_lock>
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <_free_r+0x8c>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	b933      	cbnz	r3, 80034b0 <_free_r+0x2c>
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	6014      	str	r4, [r2, #0]
 80034a6:	4628      	mov	r0, r5
 80034a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ac:	f000 b90c 	b.w	80036c8 <__malloc_unlock>
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	d908      	bls.n	80034c6 <_free_r+0x42>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	1821      	adds	r1, r4, r0
 80034b8:	428b      	cmp	r3, r1
 80034ba:	bf01      	itttt	eq
 80034bc:	6819      	ldreq	r1, [r3, #0]
 80034be:	685b      	ldreq	r3, [r3, #4]
 80034c0:	1809      	addeq	r1, r1, r0
 80034c2:	6021      	streq	r1, [r4, #0]
 80034c4:	e7ed      	b.n	80034a2 <_free_r+0x1e>
 80034c6:	461a      	mov	r2, r3
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b10b      	cbz	r3, 80034d0 <_free_r+0x4c>
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	d9fa      	bls.n	80034c6 <_free_r+0x42>
 80034d0:	6811      	ldr	r1, [r2, #0]
 80034d2:	1850      	adds	r0, r2, r1
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d10b      	bne.n	80034f0 <_free_r+0x6c>
 80034d8:	6820      	ldr	r0, [r4, #0]
 80034da:	4401      	add	r1, r0
 80034dc:	1850      	adds	r0, r2, r1
 80034de:	4283      	cmp	r3, r0
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	d1e0      	bne.n	80034a6 <_free_r+0x22>
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4401      	add	r1, r0
 80034ea:	6011      	str	r1, [r2, #0]
 80034ec:	6053      	str	r3, [r2, #4]
 80034ee:	e7da      	b.n	80034a6 <_free_r+0x22>
 80034f0:	d902      	bls.n	80034f8 <_free_r+0x74>
 80034f2:	230c      	movs	r3, #12
 80034f4:	602b      	str	r3, [r5, #0]
 80034f6:	e7d6      	b.n	80034a6 <_free_r+0x22>
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	1821      	adds	r1, r4, r0
 80034fc:	428b      	cmp	r3, r1
 80034fe:	bf01      	itttt	eq
 8003500:	6819      	ldreq	r1, [r3, #0]
 8003502:	685b      	ldreq	r3, [r3, #4]
 8003504:	1809      	addeq	r1, r1, r0
 8003506:	6021      	streq	r1, [r4, #0]
 8003508:	6063      	str	r3, [r4, #4]
 800350a:	6054      	str	r4, [r2, #4]
 800350c:	e7cb      	b.n	80034a6 <_free_r+0x22>
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	200001b0 	.word	0x200001b0

08003514 <sbrk_aligned>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4e0e      	ldr	r6, [pc, #56]	; (8003550 <sbrk_aligned+0x3c>)
 8003518:	460c      	mov	r4, r1
 800351a:	6831      	ldr	r1, [r6, #0]
 800351c:	4605      	mov	r5, r0
 800351e:	b911      	cbnz	r1, 8003526 <sbrk_aligned+0x12>
 8003520:	f000 f8bc 	bl	800369c <_sbrk_r>
 8003524:	6030      	str	r0, [r6, #0]
 8003526:	4621      	mov	r1, r4
 8003528:	4628      	mov	r0, r5
 800352a:	f000 f8b7 	bl	800369c <_sbrk_r>
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	d00a      	beq.n	8003548 <sbrk_aligned+0x34>
 8003532:	1cc4      	adds	r4, r0, #3
 8003534:	f024 0403 	bic.w	r4, r4, #3
 8003538:	42a0      	cmp	r0, r4
 800353a:	d007      	beq.n	800354c <sbrk_aligned+0x38>
 800353c:	1a21      	subs	r1, r4, r0
 800353e:	4628      	mov	r0, r5
 8003540:	f000 f8ac 	bl	800369c <_sbrk_r>
 8003544:	3001      	adds	r0, #1
 8003546:	d101      	bne.n	800354c <sbrk_aligned+0x38>
 8003548:	f04f 34ff 	mov.w	r4, #4294967295
 800354c:	4620      	mov	r0, r4
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	200001b4 	.word	0x200001b4

08003554 <_malloc_r>:
 8003554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003558:	1ccd      	adds	r5, r1, #3
 800355a:	f025 0503 	bic.w	r5, r5, #3
 800355e:	3508      	adds	r5, #8
 8003560:	2d0c      	cmp	r5, #12
 8003562:	bf38      	it	cc
 8003564:	250c      	movcc	r5, #12
 8003566:	2d00      	cmp	r5, #0
 8003568:	4607      	mov	r7, r0
 800356a:	db01      	blt.n	8003570 <_malloc_r+0x1c>
 800356c:	42a9      	cmp	r1, r5
 800356e:	d905      	bls.n	800357c <_malloc_r+0x28>
 8003570:	230c      	movs	r3, #12
 8003572:	2600      	movs	r6, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4630      	mov	r0, r6
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	4e2e      	ldr	r6, [pc, #184]	; (8003638 <_malloc_r+0xe4>)
 800357e:	f000 f89d 	bl	80036bc <__malloc_lock>
 8003582:	6833      	ldr	r3, [r6, #0]
 8003584:	461c      	mov	r4, r3
 8003586:	bb34      	cbnz	r4, 80035d6 <_malloc_r+0x82>
 8003588:	4629      	mov	r1, r5
 800358a:	4638      	mov	r0, r7
 800358c:	f7ff ffc2 	bl	8003514 <sbrk_aligned>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	4604      	mov	r4, r0
 8003594:	d14d      	bne.n	8003632 <_malloc_r+0xde>
 8003596:	6834      	ldr	r4, [r6, #0]
 8003598:	4626      	mov	r6, r4
 800359a:	2e00      	cmp	r6, #0
 800359c:	d140      	bne.n	8003620 <_malloc_r+0xcc>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	4631      	mov	r1, r6
 80035a2:	4638      	mov	r0, r7
 80035a4:	eb04 0803 	add.w	r8, r4, r3
 80035a8:	f000 f878 	bl	800369c <_sbrk_r>
 80035ac:	4580      	cmp	r8, r0
 80035ae:	d13a      	bne.n	8003626 <_malloc_r+0xd2>
 80035b0:	6821      	ldr	r1, [r4, #0]
 80035b2:	3503      	adds	r5, #3
 80035b4:	1a6d      	subs	r5, r5, r1
 80035b6:	f025 0503 	bic.w	r5, r5, #3
 80035ba:	3508      	adds	r5, #8
 80035bc:	2d0c      	cmp	r5, #12
 80035be:	bf38      	it	cc
 80035c0:	250c      	movcc	r5, #12
 80035c2:	4638      	mov	r0, r7
 80035c4:	4629      	mov	r1, r5
 80035c6:	f7ff ffa5 	bl	8003514 <sbrk_aligned>
 80035ca:	3001      	adds	r0, #1
 80035cc:	d02b      	beq.n	8003626 <_malloc_r+0xd2>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	442b      	add	r3, r5
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	e00e      	b.n	80035f4 <_malloc_r+0xa0>
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	1b52      	subs	r2, r2, r5
 80035da:	d41e      	bmi.n	800361a <_malloc_r+0xc6>
 80035dc:	2a0b      	cmp	r2, #11
 80035de:	d916      	bls.n	800360e <_malloc_r+0xba>
 80035e0:	1961      	adds	r1, r4, r5
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	6025      	str	r5, [r4, #0]
 80035e6:	bf18      	it	ne
 80035e8:	6059      	strne	r1, [r3, #4]
 80035ea:	6863      	ldr	r3, [r4, #4]
 80035ec:	bf08      	it	eq
 80035ee:	6031      	streq	r1, [r6, #0]
 80035f0:	5162      	str	r2, [r4, r5]
 80035f2:	604b      	str	r3, [r1, #4]
 80035f4:	4638      	mov	r0, r7
 80035f6:	f104 060b 	add.w	r6, r4, #11
 80035fa:	f000 f865 	bl	80036c8 <__malloc_unlock>
 80035fe:	f026 0607 	bic.w	r6, r6, #7
 8003602:	1d23      	adds	r3, r4, #4
 8003604:	1af2      	subs	r2, r6, r3
 8003606:	d0b6      	beq.n	8003576 <_malloc_r+0x22>
 8003608:	1b9b      	subs	r3, r3, r6
 800360a:	50a3      	str	r3, [r4, r2]
 800360c:	e7b3      	b.n	8003576 <_malloc_r+0x22>
 800360e:	6862      	ldr	r2, [r4, #4]
 8003610:	42a3      	cmp	r3, r4
 8003612:	bf0c      	ite	eq
 8003614:	6032      	streq	r2, [r6, #0]
 8003616:	605a      	strne	r2, [r3, #4]
 8003618:	e7ec      	b.n	80035f4 <_malloc_r+0xa0>
 800361a:	4623      	mov	r3, r4
 800361c:	6864      	ldr	r4, [r4, #4]
 800361e:	e7b2      	b.n	8003586 <_malloc_r+0x32>
 8003620:	4634      	mov	r4, r6
 8003622:	6876      	ldr	r6, [r6, #4]
 8003624:	e7b9      	b.n	800359a <_malloc_r+0x46>
 8003626:	230c      	movs	r3, #12
 8003628:	4638      	mov	r0, r7
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	f000 f84c 	bl	80036c8 <__malloc_unlock>
 8003630:	e7a1      	b.n	8003576 <_malloc_r+0x22>
 8003632:	6025      	str	r5, [r4, #0]
 8003634:	e7de      	b.n	80035f4 <_malloc_r+0xa0>
 8003636:	bf00      	nop
 8003638:	200001b0 	.word	0x200001b0

0800363c <_realloc_r>:
 800363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003640:	4680      	mov	r8, r0
 8003642:	4614      	mov	r4, r2
 8003644:	460e      	mov	r6, r1
 8003646:	b921      	cbnz	r1, 8003652 <_realloc_r+0x16>
 8003648:	4611      	mov	r1, r2
 800364a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800364e:	f7ff bf81 	b.w	8003554 <_malloc_r>
 8003652:	b92a      	cbnz	r2, 8003660 <_realloc_r+0x24>
 8003654:	f7ff ff16 	bl	8003484 <_free_r>
 8003658:	4625      	mov	r5, r4
 800365a:	4628      	mov	r0, r5
 800365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003660:	f000 f838 	bl	80036d4 <_malloc_usable_size_r>
 8003664:	4284      	cmp	r4, r0
 8003666:	4607      	mov	r7, r0
 8003668:	d802      	bhi.n	8003670 <_realloc_r+0x34>
 800366a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800366e:	d812      	bhi.n	8003696 <_realloc_r+0x5a>
 8003670:	4621      	mov	r1, r4
 8003672:	4640      	mov	r0, r8
 8003674:	f7ff ff6e 	bl	8003554 <_malloc_r>
 8003678:	4605      	mov	r5, r0
 800367a:	2800      	cmp	r0, #0
 800367c:	d0ed      	beq.n	800365a <_realloc_r+0x1e>
 800367e:	42bc      	cmp	r4, r7
 8003680:	4622      	mov	r2, r4
 8003682:	4631      	mov	r1, r6
 8003684:	bf28      	it	cs
 8003686:	463a      	movcs	r2, r7
 8003688:	f7ff fed4 	bl	8003434 <memcpy>
 800368c:	4631      	mov	r1, r6
 800368e:	4640      	mov	r0, r8
 8003690:	f7ff fef8 	bl	8003484 <_free_r>
 8003694:	e7e1      	b.n	800365a <_realloc_r+0x1e>
 8003696:	4635      	mov	r5, r6
 8003698:	e7df      	b.n	800365a <_realloc_r+0x1e>
	...

0800369c <_sbrk_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	2300      	movs	r3, #0
 80036a0:	4d05      	ldr	r5, [pc, #20]	; (80036b8 <_sbrk_r+0x1c>)
 80036a2:	4604      	mov	r4, r0
 80036a4:	4608      	mov	r0, r1
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	f7fd f9d0 	bl	8000a4c <_sbrk>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d102      	bne.n	80036b6 <_sbrk_r+0x1a>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	b103      	cbz	r3, 80036b6 <_sbrk_r+0x1a>
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	200001b8 	.word	0x200001b8

080036bc <__malloc_lock>:
 80036bc:	4801      	ldr	r0, [pc, #4]	; (80036c4 <__malloc_lock+0x8>)
 80036be:	f000 b811 	b.w	80036e4 <__retarget_lock_acquire_recursive>
 80036c2:	bf00      	nop
 80036c4:	200001bc 	.word	0x200001bc

080036c8 <__malloc_unlock>:
 80036c8:	4801      	ldr	r0, [pc, #4]	; (80036d0 <__malloc_unlock+0x8>)
 80036ca:	f000 b80c 	b.w	80036e6 <__retarget_lock_release_recursive>
 80036ce:	bf00      	nop
 80036d0:	200001bc 	.word	0x200001bc

080036d4 <_malloc_usable_size_r>:
 80036d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d8:	1f18      	subs	r0, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bfbc      	itt	lt
 80036de:	580b      	ldrlt	r3, [r1, r0]
 80036e0:	18c0      	addlt	r0, r0, r3
 80036e2:	4770      	bx	lr

080036e4 <__retarget_lock_acquire_recursive>:
 80036e4:	4770      	bx	lr

080036e6 <__retarget_lock_release_recursive>:
 80036e6:	4770      	bx	lr

080036e8 <_init>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	bf00      	nop
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr

080036f4 <_fini>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr
